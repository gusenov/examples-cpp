#include "SomeClass.h"
#include "../pchar.h"

void DoSomething(void) {
  // Обыкновенное использование конструктора:
  SomeClass sc1 = SomeClass(L"Hello World");

  // Допустимо, т.к. const wchar_t* конструктор является конструктором
  // преобразования:
  SomeClass sc2 = L"Hello World";
  // Конструктор преобразования позволяет сконструировать sc2 напрямую
  // присвоив sc2 строковое значение. Компилятор видит инструкцию, проверяет
  // есть ли у SomeClass конструктор преобразования, который принимает
  // значение соответствующего типа и выполняет вызов соответствующего
  // конструктора SomeClass.

  // Обыкновенное использование конструктора:
  SomeClass sc3 = SomeClass(1);

  // Недопустимо, т.к. int конструктор не является конструктором преобразования:
  // SomeClass sc4 = 1;
  // Компилятор потерпит неудачу, т.к. мы использовали explicit, чтобы сказать
  // компилятору, что конструктор, который принимает int не должен использоваться
  // как конструктор преобразования, но он может использоваться как любой другой
  // параметризованный конструктор.
}

int _pmain(int /*argc*/, _pchar* /*argv*/[]) {
  DoSomething();
  return 0;
}
