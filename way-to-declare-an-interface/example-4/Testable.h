// Заменив class на struct все методы становятся публичными по умолчанию.

struct Testable {
    virtual void test() = 0;

    // Дестукторы всегда должны быть либо публичными и виртуальными,
    // либо защищенными и невиртуальными.

    // При использовании публичных деструкторов пользователь принуждается
    // к их использованию и они должны быть виртуальными, чтобы работать
    // правильно. Если деструктор защищенный, то нет нужды делать его
    // виртуальным потому что только производные классы смогут вызвать его и 
    // они будут делать это автоматически. Защищенный дестуктор можно сделать
    // виртуальным, но это нехорошо.

    virtual ~Testable();

    // Нет смысла делать деструктор защищенным потому что нельзя инстанцировать
    // класс с чистыми виртуальными методами. Это также справедливо для
    // констуктора копирования. Сгенерированный компилятором констуктор
    // по умолчанию будет пусытм потому что нет членов данных и его вполне
    // достаточно для производных классов.

    // Оператор = сгенерированный компилятором по умолчанию определенно будет
    // работать неправильно. Но на практике об этом не стоит беспокоиться
    // потому что копирование интерфейсного объекта в другой не имеет смысла.

};
