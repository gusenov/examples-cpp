// Идиома Non-Virtual-Interface (NVI):

class DynamicInterface
{

  public:

    // Невиртуальный интерфейс:
    void fun() { do_fun(); }  // эквивалентно "this->do_fun()"

    // Использование public non-virtual interface с защищенной виртуальной
    // имплементацией позволяет делать разные виды утверждений (assertions)
    // в базовом классе.


    // Позволяет удалять Derived* через Base*
    virtual ~DynamicInterface() = default;

  private:

    // Чистая виртуальная имплементация:
    virtual void do_fun() = 0;

};

// При динамическом полиморфизме можно в runtime передать производный класс
// по указателю или ссылке на интерфейсный базовый класс. Runtime-система
// сделает автоматический downcast указателя this из его статического
// базового типа в динамический производный тип и вызове соответствующую
// имплементацию (обычно это делается через таблицы с указателями на
// виртуальные функции).
